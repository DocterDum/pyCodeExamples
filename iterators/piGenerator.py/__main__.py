import atexit
from audioop import getsample
import functools
import math
from decimal import *
import pickle
import requests

##################
### 
### A script that calculates an approximation of pi using the following identity: 
### 	4pi = 4*atan(1/5) - atan(1/239)
### 
### We can also use the following identity (An infinite sum)
### 	atan(1/x) = sum(i=0->inf, -1^(2i+1)/(2i+1)*(x^(2i+1)))
### 
### Using these two components, we can approximate pi using only addition, subtraction, multiplication, division, and exponents
### This means it's feasible for this approximation to be done 'by hand' without a calculator
### Obviously this is a python script, so it isn't done by hand, but this script does demonstrate that it can be done using elementary operations
### 
### This script also has multiple sources to compare your pi (And atan) results against
###    -> Wolfram Alpha, Python Math Library, Pi API, and 
### 
### Todo:
###  - The terms in the infinite sum converge at a consistent rate, that means it should be easily possible to determine the rate at which the sum acurately aproximates digits
###  - Figure out the rate ^, take log base 10 of rate, test estimation
### 

maxLen = 5000
maxDisplay = 100
maxTerms = 100

getcontext().prec = maxLen

def stringToGen(string: str, maxLen: int =-1):
	i = 0
	for char in string:
		if i == maxLen:
			raise StopIteration
		else:
			i +=1
			yield char

def genToString(gen, maxLen=-1) -> str:
	rv = ''
	if maxLen == -1:
		maxLen = 99999
	for i, char in zip(range(maxLen), gen):
		rv += char
	return rv

def printGen(gen):
	for char in gen:
		print(char, end='')
	print('')
stg = stringToGen
gts = genToString


wramAtanOneFive	= '0.1973955598498807583700497651947902934475851037878521015176889402410339699782437857326978280372880441126281180736913601044564798867942393557475654952163032700522107470015645015560061286185526633257318692806643896806189528405825931124251613297313993397113233537821796084176648310525473039665725650488878155309384290579311695934192851806364919697519401708560949527368673738508400812367856158009329822514023246675549211026704574378815474839079978985020075223696837961392278354193255722328413846477441352909705465122438302'
wramAtanOneTTN 	= '3.1583289575980921339207962431166446951613616606056336242830230438565435196519005717231652485966087058020498891790617616713036781887078296919610479234608523208353719520250320248960980578968426132117099084906302348899032454493214897988025812757023894353811736605148737346826372968407568634651610407822050484950148649268987134947085628901838715160310427336975192437898779816134412997885698528149277160224371946808787376427273190061047597425279663760321203579149407382276453667092091557254621543639061646555287441959012843'
wramAtanOneNine	= '0.0041840760020747238645382149592854527410480653076319508270196128871817783414228932737826058136229094549754506664448637560524583947893118650589221288330928008462719623307733759476346033184734145703319860154548148059924498302114603912539495276077968815588812733978533465180457425481358674644751979102328309770020646528276346532969104818386543560789195914512322209446368627661552083167964264657465511032510343526282445126935567049968444524790433177283930708631401938695195037058641077085585540452235538814237677083651569'
wramAtanOneFtNi 	= '0.0167363040082988954581528598371418109641922612305278033080784515487271133656915730951304232544916378199018026657794550242098335791572474602356885153323712033850878493230935037905384132738936582813279440618192592239697993208458415650157981104311875262355250935914133860721829701925434698579007916409313239080082586113105386131876419273546174243156783658049288837785474510646208332671857058629862044130041374105129780507742268199873778099161732709135722834525607754780780148234564308342342161808942155256950708334606276'
wramAtanOnePi= '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460165346680498862723279178608578438382796797668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009946576407895126946839835259570982582262052248940772671947826848260147699090264013639443745530506820349625245174939965143142980919065925093722169646151570985838741059788595977297549893016175392846813826868386894277415599185592524595395943104997252468084598727364469584865383673622262609912460805124388439045124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684273945226746767889525213852254995466672782398645659611635488623057745649803559363456817432411251507606947945109659609402522887971089314566913686722874894056010150330861792868092087476091782493858900971490967598526136554978189312978482168299894872265880485756401427047755513237964145152374623436454285844479526586782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853906219838744780847848968332144571386875194350643021845319104848100537061468067491927819119793995206141966342875444064374512371819217999839101591956181467514269123974894090718649423196156794520809514655022523160388193014209376213785595663893778708303906979207734672218256259966150142150306803844773454920260541466592520149744285073251866600213243408819071048633173464965145390579626856100550810665879699816357473638405257145910289706414011097120628043903975951567715770042033786993600723055876317635942187312514712053292819182618612586732157919841484882916447060957527069572209175671167229109816909152801735067127485832228718352093539657251210835791513698820914442100675103346711031412671113699086585163983150197016515116851714376576183515565088490998985998238734552833163550764791853589322618548963213293308985706420467525907091548141654985946163718027098199430992448895757128289059232332609729971208443357326548938239119325974636673058360414281388303203824903758985243744170291327656180937734440307074692112019130203303801976211011004492932151608424448596376698389522868478312355265821314495768572624334418930396864262434107732269780280731891544110104468232527162010526522721116603966655730925471105578537634668206531098965269186205647693125705863566201855810072936065987648611791045334885034611365768675324944166803962657978771855608455296'
wramPi = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566'

# def wramAtanOneFive(maxTerms=99999):
# 	for _, char in zip(range(maxTerms), oneFive):
# 		yield char

# def wramAtanOneTTN(maxTerms=99999):
# 	for _, char in zip(range(maxTerms), OneTTN):
# 		yield char

# def wramAtanOneNine(maxTerms=99999):
# 	for _, char in zip(range(maxTerms), OneNine):
# 		yield char

# def wramAtanOneFtNi(maxTerms=99999):
# 	for _, char in zip(range(maxTerms), FtNi):
# 		yield char

def prInOut(func):
	def inner(*args, **kwargs):
		result = func(*args, **kwargs)
		print(func.__name__, result, *args, **kwargs)
		return result
	return inner

@functools.cache
# @prInOut
def spineX(x, term) -> int:
	if term == 0:
		return 1/x
	else:
		return spineX(x, term-1)*(1/x**2)

@functools.cache
# @prInOut
def arcTerm(x, term):
	sign = ((-1)**term)
	spine = spineX(x, term)
	termMult = (1+(2*term))
	return sign*(spine/termMult)

def arctanOneOnX(x, maxTerms=10):
	terms = []
	for term in range(maxTerms):
		dTerm = Decimal(term)
		terms.append(arcTerm(x, dTerm))
	# print(x, f'maxTerms={maxTerms}', dTerm)
	return sum(terms)


def pi():
	for i in range(10):
		yield i

# for i in pi():
	# print(i, end='')

def dumpResults(wr, own, mathlib, pi=None):
	print('wolfram:   ', len(wr), '	', str(wr)[0:maxDisplay])
	if pi:
		print('wolfram pi:', len(pi), '	', str(pi)[0:maxDisplay])
	print('own:       ', len(str(own)), '	', str(own)[0:maxDisplay])
	print('math.atan: ', len(str(mathlib)), '		', str(mathlib)[0:maxDisplay])
	count = 0
	for charw, charo in zip(str(wr), str(own)):
		if charw==charo:
			count += 1
		else:
			break
	print(f'Match to: {count}')
	print()

def piDumper(**kwargs):
	for kwarg in kwargs:
		print(kwarg)
	# for kwarg in kwargs:
		print('', str(kwargs[kwarg])[0:maxDisplay])

# Calculated in Jupyter using Sympy
jp = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275901'

addDot = lambda inp : inp[0]+'.'+inp[1:]

class piApiInteractor():
	def __init__(self, url, maxReq=1000, pickleFileName='interactor.pkl') -> None:
		self.responses = {}
		self.url = url
		self.maxReq = maxReq
		self.pickleFileName = pickleFileName
		self.registerSave()
	
	def registerSave(self):
		atexit.register(self.save)
	
	def save(self):
		# for id, response in self.responses.items():
		# 	response.connection.close()
		pickle.dump(self, open(self.pickleFileName, "wb"))
	
	def getMod(self, digit: int):
		return digit % self.maxReq
	
	def getSectorStart(self, digit: int):
		return digit-self.getMod(digit)
	
	def getSectorID(self, digit: int):
		return int(self.getSectorStart(digit)/self.maxReq)
	
	def getSectorIDAndStart(self, digit):
		return self.getSectorID(digit), self.getSectorStart(digit)
	
	def _reqSector(self, id):
		start = id*self.maxReq
		if id not in self.responses:
			print(f'Getting sector: {id}')
			self.responses[id] = requests.get(f'https://api.pi.delivery/v1/pi?start={start}&numberOfDigits={self.maxReq}')
			self.responses[id].close()
	
	def _reqDigits(self, digits):
		id, start = self.getSectorIDAndStart(digits)
		self._reqSector(id)
	
	def digitsRange(self, start=0, end=1000):
		if  start > end:
			# Always want start smaller than end
			start, end = end, start
		
		# This interactor gathers from the API using a set request size (self.maxReq)
		# The responses are then stored in 'sectors' which are aligned based on this size
		# We need to find the sectors the start and end are in, and determine which sectors are between them
		# E.g. with a request size of 1000 digits, start @ 3548, end @ 6457:
		# We need sectors 3, 4, 5 and 6 (Digits 3000 to 7000) 
		
		startSector = self.getSectorID(start)
		endSector = self.getSectorID(end)
		sectorsNeeded = (tuple(range(startSector, endSector)) + (endSector,))
		
		for id in sectorsNeeded:
			self._reqSector(id)
		
		chunk = ''
		for id in sectorsNeeded:
			chunk += self.responses[id].json()['content']
		if 0 in sectorsNeeded:
			return addDot(chunk)
		else:
			return chunk
	
	@property
	def digits(self, end=10000):
		return self.digitsRange(end=end)
	
	@classmethod
	def fromPickle(cls, pickleFileName):
		self = pickle.load(open(pickleFileName, 'rb'))
		self.registerSave()
		return self

mr = 1000
pickleFileName = 'interactor.pkl'
try:
	piApi = piApiInteractor.fromPickle(pickleFileName)
except:
	piApi = piApiInteractor('https://api.pi.delivery/v1/pi', maxReq=mr, pickleFileName=pickleFileName)

atanooxf = arctanOneOnX(Decimal(5), maxTerms=maxTerms)
atanooxt = arctanOneOnX(Decimal(239), maxTerms=maxTerms)

dumpResults(wramAtanOneFive, atanooxf, math.atan(1/5))
dumpResults(wramAtanOneTTN, 16*atanooxf, 16*math.atan(1/5))
dumpResults(wramAtanOneNine, atanooxt, math.atan(1/239))
dumpResults(wramAtanOneFtNi, 4*atanooxt, 4*math.atan(1/239))
# dumpResults((wramAtanOnePi), (16*arctanOneOnX(Decimal(5), maxTerms=maxTerms)-4*arctanOneOnX(Decimal(239), maxTerms=maxTerms)), (math.pi), pi=(wramPi[0:maxLen]))

piDumper(
	wolframPi = (wramPi[0:maxLen]),
	wolframUsingCalcs = wramAtanOnePi,
	ownCalcs = (16*arctanOneOnX(Decimal(5), maxTerms=maxTerms)-4*arctanOneOnX(Decimal(239), maxTerms=maxTerms)),
	jupyterPi = jp,
	pyApi = piApi.digits,
	test1 = piApi.digitsRange(10001, 10002),
	test2 = piApi.digitsRange(11001, 11002),
	test3 = piApi.digitsRange(12001, 12002),
	test4 = piApi.digitsRange(13001, 13002),
	test5 = piApi.digitsRange(14001, 14002),
)